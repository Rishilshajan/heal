/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AppointmentCreateNestedManyWithoutDoctorsInput } from "./AppointmentCreateNestedManyWithoutDoctorsInput";
import {
  ValidateNested,
  IsOptional,
  IsNumber,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { ScheduleCreateNestedManyWithoutDoctorsInput } from "./ScheduleCreateNestedManyWithoutDoctorsInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class DoctorCreateInput {
  @ApiProperty({
    required: false,
    type: () => AppointmentCreateNestedManyWithoutDoctorsInput,
  })
  @ValidateNested()
  @Type(() => AppointmentCreateNestedManyWithoutDoctorsInput)
  @IsOptional()
  @Field(() => AppointmentCreateNestedManyWithoutDoctorsInput, {
    nullable: true,
  })
  appointments?: AppointmentCreateNestedManyWithoutDoctorsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  consultationFee?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location?: string | null;

  @ApiProperty({
    required: false,
    type: () => ScheduleCreateNestedManyWithoutDoctorsInput,
  })
  @ValidateNested()
  @Type(() => ScheduleCreateNestedManyWithoutDoctorsInput)
  @IsOptional()
  @Field(() => ScheduleCreateNestedManyWithoutDoctorsInput, {
    nullable: true,
  })
  schedules?: ScheduleCreateNestedManyWithoutDoctorsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  specialization?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;
}

export { DoctorCreateInput as DoctorCreateInput };
